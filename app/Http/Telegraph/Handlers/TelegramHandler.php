<?php

namespace App\Http\Telegraph\Handlers;

use App\Http\Telegraph\Handlers\Authorization\LogOut;
use App\Http\Telegraph\Handlers\Authorization\SetLoginHandler;
use App\Http\Telegraph\Handlers\Authorization\SetPasswordHandler;
use App\Http\Telegraph\Handlers\Location\SetLocation;
use App\Http\Telegraph\Handlers\Location\SetStation;
use App\Http\Telegraph\Keyboards\StartKeyboard;
use App\Models\Telegraph\TelegraphUserState;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Stringable;


class TelegramHandler extends WebhookHandler
{

    public SetLoginHandler $setLogin;
    public SetPasswordHandler  $setPassword;
    public SetLocation $setLocation;
    public SetStation $setStation;
    public GetTaskList $getTaskList;
    public WarehouseAcceptance $warehouseAcceptance;
    public CompleteTask $completeTask;
    public FinishTask $finishTask;
    public LogOut $logOut;
    public function initDependencies()
    {
        $this->setLogin = new SetLoginHandler($this->chat);
        $this->setPassword = new SetPasswordHandler($this->chat);
        $this->setLocation = new SetLocation($this->chat);
        $this->setStation = new SetStation($this->chat);

        $this->getTaskList = new GetTaskList($this->chat);
        $this->warehouseAcceptance = new WarehouseAcceptance($this->chat);
        $this->completeTask = new CompleteTask($this->chat);
        $this->finishTask = new FinishTask($this->chat);
        $this->logOut = new LogOut($this->chat);
    }

    protected function getUserId()
    {
        return $this->chat->chat_id;
    }

    public function start(): void
    {
        Log::info('–ó–∞–ø—Ä–æ—Å',[
            'chat_id' => $this->chat->id,
            'chat' =>  $this->chat,
        ]);
        $this->chat->message('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.')->keyboard(StartKeyboard::handle())->send();
    }
    public function auth(): void
    {
        TelegraphUserState::query()->updateOrCreate(
            ['user_id' => $this->getUserId()],
            ['state' => 'awaiting_login', 'data' => null]
        );
        $this->chat->message(' –í–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏–Ω. –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–í.')->send();
    }
    public function help(): void
    {
        $text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:\n"
            . "–î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>.\n\n"
            . "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
            . "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏—é¬ª\n"
            . "2Ô∏è‚É£ –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ¬ª\n"
            . "3Ô∏è‚É£ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π¬ª\n\n"
            . "‚ö†Ô∏è –í–∞–∂–Ω–æ:\n"
            . "- –°–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º —Å—Ç—Ä–æ–≥–æ –ø–æ –ø–æ—Ä—è–¥–∫—É.\n"
            . "- –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —à–∞–≥–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.\n\n"
            . "üîí –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í—ã–π—Ç–∏¬ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.\n\n"
            . "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n"
            . "üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏: +7 (123) 456-78-90\n"
            . " –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏: https://www.jde.ru/";


        $this->chat->message($text)->send();
    }

//–°–ü–ò–°–û–ö –ó–ê–î–ê–ù–ò–ô
    public function showTripsList()
    {
        $this->initDependencies();
        $this->getTaskList->handle();
    }
    public function selectTrip()
    {
        $this->initDependencies();
        $this->getTaskList->selectTrip($this->messageId, $this->data->get('tripId'));
    }
//–ü–†–ò–Å–ú –°–û –°–ö–õ–ê–î–ê

    public function acceptanceFromWarehouse()
    {
        $this->initDependencies();

        $this->warehouseAcceptance->handle($this->messageId, $this->data->get('tripId'));
    }

    public function selectTtnTrip()
    {
        $this->initDependencies();

        $this->warehouseAcceptance->selectTtnTrip( $this->data->get('ttnId'), $this->data->get('tripId'));

    }
    public function moveByOrder()
    {
        $this->initDependencies();

        $this->warehouseAcceptance->moveByOrder($this->data->get('tripId'),  $this->data->get('ttnTripId'));
    }
    //
    public function completeAcceptation()
    {
        $this->initDependencies();

        $this->warehouseAcceptance->completeAcceptation($this->data->get('tripId'), $this->data->get('ttnTripId'));
    }
    public function finishAcceptation()
    {
        $this->initDependencies();

        $this->warehouseAcceptance->finishAcceptation($this->data->get('tripId'));
    }


//–í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø
    public function completeTask()
    {
        $this->initDependencies();

        $this->completeTask->handle($this->messageId ,$this->data->get('tripId'));
    }
    public function getAddressList()
    {
        $this->initDependencies();
        $this->completeTask->getAddressList($this->messageId,$this->data->get('tripId'));
    }
    public function selectAddress()
    {
        $this->initDependencies();
        $this->completeTask->selectAddress($this->messageId, $this->data->get('addressId'),$this->data->get('tripId'));
    }

    public function arrivedToAddress()
    {
        $this->initDependencies();
        $this->completeTask->arrivedToAddress($this->data->get('addressId'),$this->data->get('tripId'));
    }
    public function leftAtAddress()
    {
        $this->initDependencies();
        $this->completeTask->leftAtAddress($this->data->get('addressId'),$this->data->get('tripId'));
    }
    public function getClientList()
    {
        $this->initDependencies();
        $this->completeTask->getClientListByAddress($this->data->get('addressId'),$this->data->get('tripId'));
    }
    public function selectClient()
    {
        $this->initDependencies();
        $this->completeTask->selectClient($this->data->get('clientName'), $this->data->get('addressId') );
    }


    //–ó–ê–í–ï–†–®–ò–¢–¨ –ó–ê–î–ê–ù–ò–ï
    public function finishTask()
    {
        $this->initDependencies();
        $this->finishTask->handle($this->messageId ,$this->data->get('tripId'));
    }
    public function arrivedToUnload()
    {
        $this->initDependencies();
        $this->finishTask->arrivedToUnload($this->data->get('tripId'));

    }
    public function completeDelivery()
    {
        $this->initDependencies();
        $this->finishTask->completeDelivery($this->data->get('tripId'));
    }
    public function submitVehicleAndDocuments()
    {
        $this->initDependencies();
        $this->finishTask->submitVehicleAndDocuments($this->data->get('tripId'));
    }



    public function handleChatMessage(Stringable $text): void
    {
        $this->initDependencies();

        $userId =$this->getUserId();

        if ($this->message->location()) {
            $this->setLocation->handleLocation($this->message->location());
        }

        $userState = TelegraphUserState::query()->where('user_id', $userId)->first();

        if ($userState){
            switch ($userState->state) {
                case 'awaiting_login':
                    $this->setLogin->handle($text->toString());
                    break;
                case 'awaiting_password':
                    $this->setPassword->handle($text->toString());
                    break;
                case 'awaiting_city':
                    $this->setLocation->setCity($text->toString());
                    break;
                case 'awaiting_station':
                    $this->setStation->handle($text->toString());
                    break;
            }
        }

        switch ($text->toString()) {
            case '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π':
                $this->getTaskList->handle();
                break;
            case '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏—é' :
                $this->setLocation->location();
                break;
            case '–í—ã–π—Ç–∏' :
                $this->logOut->handle();
                break;
        }
    }
}
