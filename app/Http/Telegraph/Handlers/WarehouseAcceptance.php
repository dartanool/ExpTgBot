<?php

namespace App\Http\Telegraph\Handlers;

use App\DTO\GetTaskDTO;
use App\DTO\GetTtnTripDTO;
use App\Http\Services\ExpeditorApiService;
use App\Http\Telegraph\Keyboards\WarehouseTtnsKeyboard;
use App\Models\Telegraph\TelegraphUserLocation;
use DefStudio\Telegraph\Models\TelegraphChat;

//–ü—Ä–∏—ë–º —Å–æ —Å–∫–ª–∞–¥–∞
class WarehouseAcceptance
{
    private ExpeditorApiService $expeditorApiService;
    private TelegraphChat $chat;
    public function __construct(TelegraphChat $chat)
    {
        $this->chat = $chat;
        $this->expeditorApiService = new ExpeditorApiService($chat->chat_id);
    }
    public function handle(int $messageId, string $tripId)
    {
        $this->chat->deleteMessage($messageId)->send();
        $ttns = $this->expeditorApiService->acceptanceFromWarehouse($tripId);

        $this->chat->message("–°–ø–∏—Å–æ–∫ –ø–æ—Ä—É—á–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–∏—é {$tripId}")->keyboard(WarehouseTtnsKeyboard::show($ttns->trips, $tripId))->send();
    }

    public function selectTtnTrip(int $ttnId, string $tripId)
    {
        $ttns = $this->expeditorApiService->acceptanceFromWarehouse($tripId);
        $ttn = $this->expeditorApiService->getTtnTripById($ttnId, $ttns->trips);

        $this->chat->message($this->formatTtnTripDetails($ttn))->keyboard(WarehouseTtnsKeyboard::createDetailsKeyboard($ttn, $tripId))
            ->send();
    }

    public function moveByOrder(int $messageId, string $tripId, int $ttnTripId)
    {
        if ($this->checkLocation()) {
            $ttns = $this->expeditorApiService->acceptanceFromWarehouse($tripId);
            $ttn = $this->expeditorApiService->getTtnTripById($ttnTripId, $ttns->trips);

            $location = TelegraphUserLocation::query()->where('user_id', $this->chat->chat_id)->first();
            $this->expeditorApiService->moveByOrder($tripId, $ttn->idAexTtnTrip, $location->event_lat, $location->event_lon);
            $response = $this->chat->message("–í—ã –Ω–∞–∂–∞–ª–∏: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –¢–° –ø–æ –ø–æ—Ä—É—á–µ–Ω–∏—é")->send();
            sleep(3);
            $this->chat->deleteMessage($response->telegraphMessageId())->send();
        } else {
            $this->chat->message('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')->send();
        }
    }

    public function finishAcceptation(int $messageId, string $tripId)
    {
        if ($this->checkLocation()) {
            $response = $this->expeditorApiService->finishAcceptation($tripId, $location->event_lat, $location->event_lon);
            $response = $this->chat->message("–í—ã –Ω–∞–∂–∞–ª–∏: –û–∫–æ–Ω—á–∏–ª –ø—Ä–∏–µ–º")->send();
            sleep(3);
            $this->chat->deleteMessage($response->telegraphMessageId())->send();
        } else {
            $this->chat->message('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')->send();
        }
    }

    private function formatTtnTripDetails(GetTtnTripDTO $trip): string
    {
        $contactParts = explode(':', $trip->aexoTel);
        $phone = $contactParts[0] ?? '';
        $contactName = $contactParts[1] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

        return <<<TEXT
            üì¶ –î–µ—Ç–∞–ª–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è #{$trip->prchStrNom}

            ID –ø–æ—Ä—É—á–µ–Ω–∏—è: {$trip->idAexTtnTrip}
            ID –∑–∞—è–≤–∫–∏: {$trip->aexTtnTripIdRec}
            ID —Å–æ–±—ã—Ç–∏—è: {$trip->idS72}

            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞:
            - –í–µ—Å: {$trip->prchVes} –∫–≥
            - –û–±—ä–µ–º: {$trip->prchObyom} –º¬≥
            - –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Å—Ç–∞: {$trip->prchCliMest}
            - –ë–∞–≥–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞: {$trip->prchBagMest}

            –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:
            - –¢–µ–ª–µ—Ñ–æ–Ω: {$phone}
            - –ò–º—è: {$contactName}
            TEXT;
    }
    private function checkLocation() : bool
    {
        $location = TelegraphUserLocation::query()->where('user_id', $this->chat->chat_id)->first();

        if ($location->event_lat & $location->event_lon && $location->station_id) {
            return true;
        }
        return false;
    }

}
