<?php

namespace App\Http\Telegraph\Handlers;

use App\DTO\GetTaskDTO;
use App\DTO\GetTtnTripDTO;
use App\Http\Services\ExpeditorApiService;
use App\Http\Telegraph\Keyboards\TaskListKeyboard;
use App\Http\Telegraph\Keyboards\TtnsKeyboard;
use App\Models\Telegraph\TelegraphUserLocation;
use DefStudio\Telegraph\Facades\Telegraph;

class WarehouseAcceptance
{
    private ExpeditorApiService $expeditorApiService;
    private int $userId;
    public function __construct(int $userId)
    {
        $this->userId = $userId;
        $this->expeditorApiService = new ExpeditorApiService($userId);
    }
    public function handle(int $messageId, string $tripId)
    {
        $ttns = $this->expeditorApiService->acceptanceFromWarehouse($tripId);
        Telegraph::deleteMessage($messageId)->send();

        Telegraph::message('ls')->keyboard(TtnsKeyboard::show($ttns->trips, $tripId))
            ->send();
    }

    public function selectTtnTrip(int $messageId, int $ttnId, string $tripId)
    {
        $ttns = $this->expeditorApiService->acceptanceFromWarehouse($tripId);
        $ttn = $this->expeditorApiService->getTtnTripById($ttnId, $ttns->trips);

        Telegraph::message($this->formatTtnTripDetails($ttn))->keyboard(TtnsKeyboard::createDetailsKeyboard($ttn, $tripId))
            ->send();
    }
    public function moveByOrder(string $tripId, int $ttnTripId)
    {
        $location = TelegraphUserLocation::query()->where('user_id', $this->userId)->first();
        $this->expeditorApiService->moveByOrder($tripId, $ttnTripId, $location->event_lat, $location->event_lon);
    }

    public function completeAcceptation(string $tripId, int $ttnTripId)
    {
        Telegraph::message('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')->send();

        $location = TelegraphUserLocation::query()->where('user_id', $this->userId)->first();

        if ($location->event_lat & $location->event_lon) {
            $response = $this->expeditorApiService->completeAcceptation($tripId, $ttnTripId, $location->event_lat, $location->event_lon);
            Telegraph::message('lf')->send();
        } else {
            Telegraph::message('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')->send();
        }
    }


    public function cancelEvent(string $tripId)
    {
        Telegraph::message('Cancel event')->send();
        $response = $this->expeditorApiService->cancelEvent($tripId);
    }


    public function finishAcceptation(string $tripId)
    {
        $location = TelegraphUserLocation::query()->where('user_id', $this->userId)->first();

        if ($location->event_lat & $location->event_lon) {
            $response = $this->expeditorApiService->finishAcceptation($tripId, $location->event_lat, $location->event_lon);
            Telegraph::message('lf')->send();
        } else {
            Telegraph::message('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')->send();
        }
        Telegraph::message('Finish acceptation')->send();
    }


    private function formatTripDetails(GetTaskDTO $trip): string
    {
        return <<<TEXT
        üöõ *–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è #{$trip->id}*

        *–ú–∞—à–∏–Ω–∞:* {$trip->carNumber}
        *–ì–æ—Ä–æ–¥:* {$trip->cityName}
        *–í—Ä–µ–º—è:* {$trip->startDate} - {$trip->endDate}

        *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
        - –í—Å–µ–≥–æ –ø–æ—Ä—É—á–µ–Ω–∏–π: {$trip->totalTasks}
        - –î–æ—Å—Ç–∞–≤–∫–∞: {$trip->deliveryTasksCount} (–í–µ—Å: {$trip->deliveryWeight} –∫–≥)
        - –ó–∞–±–æ—Ä: {$trip->pickupTasksCount} (–í–µ—Å: {$trip->pickupWeight} –∫–≥)

        *–°—Ç–∞—Ç—É—Å:* {$this->getStatusText($trip)}
        TEXT;
    }
    private function getStatusText(GetTaskDTO $trip): string
    {
        return match($trip->statusReady) {
            1 => '–ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
            2 => '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            default => '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
        };
    }

    private function formatTtnTripDetails(GetTtnTripDTO $trip): string
    {
        // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        $contactParts = explode(':', $trip->aexoTel);
        $phone = $contactParts[0] ?? '';
        $contactName = $contactParts[1] ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

        return <<<TEXT
            üì¶ *–î–µ—Ç–∞–ª–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è #{$trip->prchStrNom}*

            *ID –ø–æ—Ä—É—á–µ–Ω–∏—è:* {$trip->idAexTtnTrip}
            *ID –∑–∞—è–≤–∫–∏:* {$trip->aexTtnTripIdRec}
            *ID —Å–æ–±—ã—Ç–∏—è:* {$trip->idS72}

            *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞:*
            - –í–µ—Å: {$trip->prchVes} –∫–≥
            - –û–±—ä–µ–º: {$trip->prchObyom} –º¬≥
            - –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Å—Ç–∞: {$trip->prchCliMest}
            - –ë–∞–≥–∞–∂–Ω—ã–µ –º–µ—Å—Ç–∞: {$trip->prchBagMest}

            *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:*
            - –¢–µ–ª–µ—Ñ–æ–Ω: {$phone}
            - –ò–º—è: {$contactName}
            TEXT;
    }

}
